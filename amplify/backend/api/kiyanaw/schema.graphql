type Transcription
  @model
  @key(fields: ["id"])
  @key(name: "ByTitle", fields: ["title"], queryField: "byTitle")
  # @key(name: "ByOwnerUpdated", fields: ["author", "dateLastUpdated"], queryField: "byOwnerUpdated")
  @auth(
    rules: [
      # { allow: owner, operations: [create, read, update, delete], ownerField: "author" }
      # { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] }
      # { allow: groups, groups: ["everyone"], operations: [read]}
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  author: String!
  coverage: Float
  dateLastUpdated: String!
  userLastUpdated: String
  length: Float
  issues: String
  comments: String
  tags: String
  source: String
  index: String
  title: String!
  type: String!
  contributors: String
}

type Region
  @model
  @key(fields: ["id"])
  @key(name: "ByTranscription", fields: ["transcriptionId"], queryField: "byTranscription")
  @auth(rules: [{ allow: public, provider: iam }])
  @versioned {
  id: String!
  start: Float!
  end: Float!
  text: String!
  issues: String
  isNote: Boolean
  comments: String
  translation: String
  dateLastUpdated: String!
  userLastUpdated: String!
  transcriptionId: String!
}

type Cursor @model @key(fields: ["id", "user"]) @auth(rules: [{ allow: public, provider: iam }]) {
  id: String!
  user: String!
  cursor: String!
}

type RegionLock
  @model
  @key(fields: ["id", "transcriptionId"])
  @auth(rules: [{ allow: public, provider: iam }]) {
  id: String!
  transcriptionId: String!
  deleteTime: AWSTimestamp!
  user: String!
}
